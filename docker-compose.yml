version: "3.8"


########################
# KAFKA - CONFIG
########################
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - hadoop

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - hadoop

########################
# KAFKA - EXECUTION
########################

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka
    volumes:
      - shared-data:/data
    networks:
      - hadoop

########################
# STREAM - BRONZE
########################
  stream_to_bronze:
    build: ./spark-bronze
    container_name: stream_to_bronze
    depends_on:
      - kafka
    volumes:
      - shared-data:/data
    networks:
      - hadoop

########################
# BATCH - SILVER/GOLD
########################

  batch_to_silver:
    build: ./spark-silver
    image: spark-silver:latest
    container_name: batch_to_silver
    volumes:
      - shared-data:/data
    networks:
      - hadoop

  batch_to_gold:
    build: ./spark-gold
    image: spark-gold:latest 
    container_name: batch_to_gold
    volumes:
      - shared-data:/data
    networks:
      - hadoop

########################
# AIRFLOW
########################

  airflow:
    image: apache/airflow:2.8.1
    container_name: airflow
    command: standalone
    ports:
      - "8080:8080" 
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - _AIRFLOW_WWW_USER_CREATE=True
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - /var/run/docker.sock:/var/run/docker.sock 
      - shared-data:/data
    depends_on:
      - kafka
    networks:
      - hadoop

########################
# GRAFANA
########################

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - hadoop

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - ./grafana/dashboards:/etc/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hadoop

volumes:
  shared-data:

networks:
  hadoop:
    driver: bridge
